//PhanSo2
#include <iostream>

using namespace std;

class ps {
	int tu, mau;
public:
	ps(int _tu = 0, int _mau = 1) {
		tu = _tu;
		mau = _mau;
	}
	ps(const ps& p) {
		tu = p.tu;
		mau = p.mau;
	}
	~ps() {};
	friend istream& operator >> (istream& is, ps& p) {
		is >> p.tu >> p.mau;
		return is;
	}
	friend ostream& operator << (ostream& os, ps& p) {
		os << p.tu << "/" << p.mau;
		return os;
	}
	bool operator == (ps& p) {
		if (tu != p.tu || mau != p.mau) {
			return false;
		}
		return true;
	}
	bool operator != (ps& p) {
		if (tu == p.tu && mau == p.mau) {
			return false;
		}
		return true;
	}
	ps operator + (ps& p) {
		ps kq;
		kq.tu = tu * p.mau + p.tu * mau;
		kq.mau = mau * p.mau;
		return kq;
	}
	int ucln(int a, int b) {
		while (a * b != 0) {
			if (a > b) {
				a %= b;
			}
			else {
				b %= a;
			}
		}
		return a + b;
	}
	ps RutGon() {
		ps kq;
		int a = ucln(tu, mau);
		kq.tu = tu / a;
		kq.mau = mau / a;
		return kq;
	}
};
class mang {
	int n;
	ps p[100];
public:
	mang(int _n = 0) {
		n = _n;
	}
	mang(const mang& m) {
		n = m.n;
	}
	~mang() {};
	friend istream& operator >> (istream& is, mang& m) {
		while (is >> m.p[m.n]) {
			m.n++;
		}
		return is;
	}
	friend ostream& operator << (ostream& os, mang& m) {
		ps tong;
		for (int i = 0; i < m.n; i++) {
			tong = tong + m.p[i];
		}
		ps kq;
		kq = tong.RutGon();
		os << kq;
		return os;
	}
};

int main() {
	mang m;
	cin >> m;
	cout << m;
	return 0;
}